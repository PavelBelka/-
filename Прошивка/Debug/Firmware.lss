
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000328  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000919  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d8  00000000  00000000  00000d21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000427  00000000  00000000  000013f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00001820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d2  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000246  00000000  00000000  00001e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_16>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_17>
  48:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_20>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 45 01 	call	0x28a	; 0x28a <main>
  88:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initialization>:

volatile uint16_t temperature_avaliable()
{
	uint16_t temp = (data_max[0] << 4) | (data_max[1] >>4);
	return temp;
}
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8a 62       	ori	r24, 0x2A	; 42
  94:	84 b9       	out	0x04, r24	; 4
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8e 7e       	andi	r24, 0xEE	; 238
  9a:	84 b9       	out	0x04, r24	; 4
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	80 66       	ori	r24, 0x60	; 96
  a0:	8a b9       	out	0x0a, r24	; 10
  a2:	57 98       	cbi	0x0a, 7	; 10
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	87 b9       	out	0x07, r24	; 7
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	87 7d       	andi	r24, 0xD7	; 215
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	83 60       	ori	r24, 0x03	; 3
  b4:	88 b9       	out	0x08, r24	; 8
  b6:	89 e1       	ldi	r24, 0x19	; 25
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  c2:	e1 ec       	ldi	r30, 0xC1	; 193
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 6d       	ori	r24, 0xD8	; 216
  ca:	80 83       	st	Z, r24
  cc:	e2 ec       	ldi	r30, 0xC2	; 194
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24
  d6:	78 94       	sei
  d8:	08 95       	ret

000000da <spi_reception_max31855>:
  da:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <flags_avaliable>
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <flags_avaliable>
  e4:	40 98       	cbi	0x08, 0	; 8
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	8e bd       	out	0x2e, r24	; 46
  ea:	08 95       	ret

000000ec <USART_Transmit>:
  ec:	e6 e0       	ldi	r30, 0x06	; 6
  ee:	f1 e0       	ldi	r31, 0x01	; 1
  f0:	80 83       	st	Z, r24
  f2:	61 83       	std	Z+1, r22	; 0x01
  f4:	42 83       	std	Z+2, r20	; 0x02
  f6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter_usart>
  fa:	80 81       	ld	r24, Z
  fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 100:	08 95       	ret

00000102 <__vector_17>:

ISR(SPI_STC_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
		else
		{
			SPDR = 0xFF;
		}
	}*/
}
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
	counter_update_max++;
 138:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_update_max>
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter_update_max>
	if (counter_update_max == 9)
 142:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_update_max>
 146:	89 30       	cpi	r24, 0x09	; 9
 148:	39 f4       	brne	.+14     	; 0x158 <__vector_16+0x42>
	{
		counter_update_max = 0;
 14a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter_update_max>
		if (!(flags_avaliable & (1 << transmit_spi)))
 14e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <flags_avaliable>
 152:	82 ff       	sbrs	r24, 2
		{
			spi_reception_max31855();
 154:	0e 94 6d 00 	call	0xda	; 0xda <spi_reception_max31855>
		}
	}
}
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	bf 91       	pop	r27
 15e:	af 91       	pop	r26
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	7f 91       	pop	r23
 166:	6f 91       	pop	r22
 168:	5f 91       	pop	r21
 16a:	4f 91       	pop	r20
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_9>:

ISR(TIMER2_OVF_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
	counter_update_led++;
 186:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter_update_led>
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter_update_led>
	if (counter_update_led == 61)//режимы мигания светодиодов
 190:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter_update_led>
 194:	8d 33       	cpi	r24, 0x3D	; 61
 196:	f9 f4       	brne	.+62     	; 0x1d6 <__vector_9+0x5c>
	{
		counter_update_led = 0;
 198:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counter_update_led>
		switch (led_state)
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	61 f0       	breq	.+24     	; 0x1bc <__vector_9+0x42>
 1a4:	83 30       	cpi	r24, 0x03	; 3
 1a6:	89 f0       	breq	.+34     	; 0x1ca <__vector_9+0x50>
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	a9 f4       	brne	.+42     	; 0x1d6 <__vector_9+0x5c>
		{
			case 1:
			if (PORTD & (1 << Led_green))
 1ac:	5e 9b       	sbis	0x0b, 6	; 11
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <__vector_9+0x3c>
			{
				PORTD &= ~(1 << Led_green);
 1b0:	5e 98       	cbi	0x0b, 6	; 11
				PORTD |= (1 << Led_red);
 1b2:	5d 9a       	sbi	0x0b, 5	; 11
 1b4:	10 c0       	rjmp	.+32     	; 0x1d6 <__vector_9+0x5c>
			}
			else
			{
				PORTD |= (1 << Led_green);
 1b6:	5e 9a       	sbi	0x0b, 6	; 11
				PORTD &= ~(1 << Led_red);
 1b8:	5d 98       	cbi	0x0b, 5	; 11
 1ba:	0d c0       	rjmp	.+26     	; 0x1d6 <__vector_9+0x5c>
			}
			break;
			case 2:
			PORTD &= ~(1 << Led_red);
 1bc:	5d 98       	cbi	0x0b, 5	; 11
			if (PORTD & (1 << Led_green))
 1be:	5e 9b       	sbis	0x0b, 6	; 11
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__vector_9+0x4c>
			{
				PORTD &= ~(1 << Led_green);
 1c2:	5e 98       	cbi	0x0b, 6	; 11
 1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <__vector_9+0x5c>
			}
			else
			{
				PORTD |= (1 << Led_green);
 1c6:	5e 9a       	sbi	0x0b, 6	; 11
 1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__vector_9+0x5c>
			}
			break;
			case 3:
			PORTD &= ~(1 << Led_green);
 1ca:	5e 98       	cbi	0x0b, 6	; 11
			if (PORTD & (1 << Led_red))
 1cc:	5d 9b       	sbis	0x0b, 5	; 11
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__vector_9+0x5a>
			{
				PORTD &= ~(1 << Led_red);
 1d0:	5d 98       	cbi	0x0b, 5	; 11
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <__vector_9+0x5c>
			}
			else
			{
				PORTD |= (1 << Led_red);
 1d4:	5d 9a       	sbi	0x0b, 5	; 11
			}
			break;
		}
	}
}
 1d6:	8f 91       	pop	r24
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <__vector_20>:

ISR(USART_TX_vect)
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
	counter_usart++;
 1f2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <counter_usart>
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <counter_usart>
	if (counter_usart > 2)//последняя посылка
 1fc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <counter_usart>
 200:	83 30       	cpi	r24, 0x03	; 3
 202:	58 f0       	brcs	.+22     	; 0x21a <__vector_20+0x38>
	{
		//flags_avaliable &= ~(1 << avaliable_usart);
		flags_avaliable &= ~(1 << transmit_usart);
 204:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <flags_avaliable>
 208:	87 7f       	andi	r24, 0xF7	; 247
 20a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <flags_avaliable>
		data_recive[0] = 0;
 20e:	e9 e0       	ldi	r30, 0x09	; 9
 210:	f1 e0       	ldi	r31, 0x01	; 1
 212:	10 82       	st	Z, r1
		data_recive[1] = 0;
 214:	11 82       	std	Z+1, r1	; 0x01
		data_recive[2] = 0;
 216:	12 82       	std	Z+2, r1	; 0x02
 218:	08 c0       	rjmp	.+16     	; 0x22a <__vector_20+0x48>
	}
	else
	{
		UDR0 = data_transmit[counter_usart];// посылаем следующий пакет
 21a:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <counter_usart>
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	ea 5f       	subi	r30, 0xFA	; 250
 222:	fe 4f       	sbci	r31, 0xFE	; 254
 224:	80 81       	ld	r24, Z
 226:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	8f 91       	pop	r24
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <__vector_18>:

ISR(USART_RX_vect)
{
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	8f 93       	push	r24
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31
	data_recive[counter_recive] = UDR0;
 24a:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <counter_recive>
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 254:	e7 5f       	subi	r30, 0xF7	; 247
 256:	fe 4f       	sbci	r31, 0xFE	; 254
 258:	80 83       	st	Z, r24
	counter_recive ++;
 25a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_recive>
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter_recive>
	if (counter_recive > 2) // если приняли все пакеты
 264:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_recive>
 268:	83 30       	cpi	r24, 0x03	; 3
 26a:	38 f0       	brcs	.+14     	; 0x27a <__vector_18+0x40>
	{
		counter_recive = 0;
 26c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter_recive>
		flags_avaliable |= (1 << avaliable_usart);
 270:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <flags_avaliable>
 274:	82 60       	ori	r24, 0x02	; 2
 276:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <flags_avaliable>
			default:
				USART_Transmit('E', 0x7272);
				break;
		}*/
	}
}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	8f 91       	pop	r24
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <main>:


int main(void)
{
	initialization();
 28a:	0e 94 48 00 	call	0x90	; 0x90 <initialization>
    while (1) 
    {
		if (flags_avaliable & (1 << avaliable_usart))
		{
			flags_avaliable &= ~(1 << avaliable_usart);
			USART_Transmit(data_recive[0], data_recive[1], data_recive[2]);
 28e:	c9 e0       	ldi	r28, 0x09	; 9
 290:	d1 e0       	ldi	r29, 0x01	; 1
int main(void)
{
	initialization();
    while (1) 
    {
		if (flags_avaliable & (1 << avaliable_usart))
 292:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <flags_avaliable>
 296:	81 ff       	sbrs	r24, 1
 298:	fc cf       	rjmp	.-8      	; 0x292 <main+0x8>
		{
			flags_avaliable &= ~(1 << avaliable_usart);
 29a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <flags_avaliable>
 29e:	8d 7f       	andi	r24, 0xFD	; 253
 2a0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <flags_avaliable>
			USART_Transmit(data_recive[0], data_recive[1], data_recive[2]);
 2a4:	4a 81       	ldd	r20, Y+2	; 0x02
 2a6:	69 81       	ldd	r22, Y+1	; 0x01
 2a8:	88 81       	ld	r24, Y
 2aa:	0e 94 76 00 	call	0xec	; 0xec <USART_Transmit>
 2ae:	f1 cf       	rjmp	.-30     	; 0x292 <main+0x8>

000002b0 <_exit>:
 2b0:	f8 94       	cli

000002b2 <__stop_program>:
 2b2:	ff cf       	rjmp	.-2      	; 0x2b2 <__stop_program>
