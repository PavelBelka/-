
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800100  00800100  00000542  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ab  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fc  00000000  00000000  00000fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056f  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00001c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bf  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000357  00000000  00000000  000022c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000261a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_16>
  44:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_17>
  48:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_20>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 31       	cpi	r26, 0x14	; 20
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 28 02 	call	0x450	; 0x450 <main>
  88:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initialization>:
volatile uint8_t mode = 0; // режим работы

void initialization()
{
	// Настройка порта B: PB0 - вход, PB1 - выход, (SCK, MOSI) - выход, MISO - вход
	DDRB |= (1 << PORTB1) | (1 << SPI_sck) | (1 << SPI_mosi);
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8a 62       	ori	r24, 0x2A	; 42
  94:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~((1 << PORTB0) | (1 << SPI_miso));
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8e 7e       	andi	r24, 0xEE	; 238
  9a:	84 b9       	out	0x04, r24	; 4
	// Настройка порта D: PD7, PD0 - вход, PD6, PD5, PD1 - выход
	DDRD |= (1 << PORTD6) | (1 << PORTD5) | (1 << PORTD1);
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	82 66       	ori	r24, 0x62	; 98
  a0:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1 << PORTD7) | (1 << PORTD0));
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	8e 77       	andi	r24, 0x7E	; 126
  a6:	8a b9       	out	0x0a, r24	; 10
	// Настройка порта C: PC0 - выход, PC1 - выход
	DDRC |= (1 << CS_max31855) | (1 << CS_mcp41010);
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	83 60       	ori	r24, 0x03	; 3
  ac:	87 b9       	out	0x07, r24	; 7
	PORTB &= ~((1 << SPI_sck) | (1 << SPI_mosi));
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	87 7d       	andi	r24, 0xD7	; 215
  b2:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1 << CS_mcp41010) | (1 << CS_max31855);
  b4:	88 b1       	in	r24, 0x08	; 8
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	88 b9       	out	0x08, r24	; 8
	// Настройка SPI: делитель на 128, режим master, прерывание включены
	SPCR |= (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << SPR1);
  ba:	8c b5       	in	r24, 0x2c	; 44
  bc:	83 6d       	ori	r24, 0xD3	; 211
  be:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~((1 << CPOL) | (1 << CPHA) | (1 << DORD));
  c0:	8c b5       	in	r24, 0x2c	; 44
  c2:	83 7d       	andi	r24, 0xD3	; 211
  c4:	8c bd       	out	0x2c, r24	; 44
	// Настройка USART: асинхронный режим, 8 бит посылка, 1 стоп-бит, контроль четности отключен, скорость 9600 бод, прерывание по приему
	UCSR0A |= (1 << U2X0); //включаем ускоритель
  c6:	e0 ec       	ldi	r30, 0xC0	; 192
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	80 83       	st	Z, r24
	UBRR0 = 103;
  d0:	87 e6       	ldi	r24, 0x67	; 103
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0) | (1 << TXCIE0);
  dc:	e1 ec       	ldi	r30, 0xC1	; 193
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	88 6d       	ori	r24, 0xD8	; 216
  e4:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00);
  e6:	e2 ec       	ldi	r30, 0xC2	; 194
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	8e 60       	ori	r24, 0x0E	; 14
  ee:	80 83       	st	Z, r24
	UCSR0C &= ~((1 << UMSEL00) | (1 << UMSEL01) | (1 << USBS0));
  f0:	80 81       	ld	r24, Z
  f2:	87 73       	andi	r24, 0x37	; 55
  f4:	80 83       	st	Z, r24
	// Настройка таймера 0: предделитель на 1024, прерывание по переполнению включен
	TCCR0B |= (1 << CS02) | (1 << CS00);
  f6:	85 b5       	in	r24, 0x25	; 37
  f8:	85 60       	ori	r24, 0x05	; 5
  fa:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);
  fc:	ee e6       	ldi	r30, 0x6E	; 110
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	81 60       	ori	r24, 0x01	; 1
 104:	80 83       	st	Z, r24
	// Настройка таймера 2: предделитель на 1024, прерывание по переполнению включен
	TCCR2B |= (1 << CS00) | (1 << CS01) | (1 << CS02);
 106:	e1 eb       	ldi	r30, 0xB1	; 177
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	87 60       	ori	r24, 0x07	; 7
 10e:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2);
 110:	e0 e7       	ldi	r30, 0x70	; 112
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	81 60       	ori	r24, 0x01	; 1
 118:	80 83       	st	Z, r24
	sei();
 11a:	78 94       	sei
 11c:	08 95       	ret

0000011e <spi_transmit_mcp>:
}

void spi_transmit_mcp(uint8_t command, uint8_t data)//отправка по spi на mcp41010
{
	flags_avaliable |= (1 << avaliable_spi);//флаг занятости шины spi
 11e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <flags_avaliable>
 122:	91 60       	ori	r25, 0x01	; 1
 124:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <flags_avaliable>
	data_mcp[0] = command;
 128:	e2 e1       	ldi	r30, 0x12	; 18
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	80 83       	st	Z, r24
	data_mcp[1] = data;
 12e:	61 83       	std	Z+1, r22	; 0x01
	PORTC &= ~(1 << CS_mcp41010); //прижимаем CS к земле
 130:	41 98       	cbi	0x08, 1	; 8
	flags_avaliable |= (1 << transmit_spi); // сообщаем, что занимаемся отправкой
 132:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <flags_avaliable>
 136:	84 60       	ori	r24, 0x04	; 4
 138:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <flags_avaliable>
	SPDR = data_mcp[0]; // отправляем 1 пакет данных
 13c:	80 81       	ld	r24, Z
 13e:	8e bd       	out	0x2e, r24	; 46
 140:	08 95       	ret

00000142 <spi_reception_max31855>:
}

void spi_reception_max31855()
{
	flags_avaliable |= (1 << avaliable_spi);
 142:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <flags_avaliable>
 146:	81 60       	ori	r24, 0x01	; 1
 148:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <flags_avaliable>
	PORTC &= ~(1 << CS_max31855);
 14c:	40 98       	cbi	0x08, 0	; 8
	SPDR = 0xFF;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	8e bd       	out	0x2e, r24	; 46
 152:	08 95       	ret

00000154 <USART_Transmit>:
}

void USART_Transmit(uint8_t command, uint16_t data) // передача команды и данных по uart
{
	//делим на пакеты
	data_transmit[0] = command;
 154:	e8 e0       	ldi	r30, 0x08	; 8
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	80 83       	st	Z, r24
	data_transmit[1] = data >> 8;
 15a:	71 83       	std	Z+1, r23	; 0x01
	data_transmit[2] = data & 0xFF;
 15c:	62 83       	std	Z+2, r22	; 0x02
	flags_avaliable |= (1 << avaliable_usart); // говорим что занят uart
 15e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <flags_avaliable>
 162:	82 60       	ori	r24, 0x02	; 2
 164:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <flags_avaliable>
	counter_usart = 0;
 168:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter_usart>
	UDR0 = data_transmit[0]; //записываем данные
 16c:	80 81       	ld	r24, Z
 16e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 172:	08 95       	ret

00000174 <temperature_avaliable>:
}

volatile uint16_t temperature_avaliable()
{
	uint16_t temp = (data_max[0] << 4) | (data_max[1] >>4);
 174:	ee e0       	ldi	r30, 0x0E	; 14
 176:	f1 e0       	ldi	r31, 0x01	; 1
 178:	80 81       	ld	r24, Z
 17a:	21 81       	ldd	r18, Z+1	; 0x01
	return temp;
 17c:	30 e1       	ldi	r19, 0x10	; 16
 17e:	83 9f       	mul	r24, r19
 180:	c0 01       	movw	r24, r0
 182:	11 24       	eor	r1, r1
 184:	22 95       	swap	r18
 186:	2f 70       	andi	r18, 0x0F	; 15
}
 188:	82 2b       	or	r24, r18
 18a:	08 95       	ret

0000018c <__vector_17>:

ISR(SPI_STC_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
	if (flags_avaliable & (1 << transmit_spi)) //проверяем отправляем ли мы данные
 1ae:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <flags_avaliable>
 1b2:	82 ff       	sbrs	r24, 2
 1b4:	1c c0       	rjmp	.+56     	; 0x1ee <__vector_17+0x62>
	{
		switch(step_transmit)
 1b6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step_transmit>
 1ba:	88 23       	and	r24, r24
 1bc:	19 f0       	breq	.+6      	; 0x1c4 <__vector_17+0x38>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	41 f0       	breq	.+16     	; 0x1d2 <__vector_17+0x46>
 1c2:	3c c0       	rjmp	.+120    	; 0x23c <__vector_17+0xb0>
		{
			case 0:
				SPDR = data_mcp[1]; // отправляем 2 пакет данных
 1c4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <data_mcp+0x1>
 1c8:	8e bd       	out	0x2e, r24	; 46
				step_transmit = 1; // следующий шаг в отправке
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <step_transmit>
				break;
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <__vector_17+0xb0>
			case 1: //завершаем отправку
				PORTC |= (1 << CS_mcp41010); // отжимаем CS от земли
 1d2:	41 9a       	sbi	0x08, 1	; 8
				step_transmit = 0;
 1d4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <step_transmit>
				flags_avaliable &= ~(1 << avaliable_spi); // SPI свободен
 1d8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <flags_avaliable>
 1dc:	8e 7f       	andi	r24, 0xFE	; 254
 1de:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <flags_avaliable>
				flags_avaliable &= ~(1 << transmit_spi); // больше отправлять не будем
 1e2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <flags_avaliable>
 1e6:	8b 7f       	andi	r24, 0xFB	; 251
 1e8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <flags_avaliable>
				break;
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <__vector_17+0xb0>
		}	
	}
	else
	{
		data_max[step_transmit] = SPDR;
 1ee:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <step_transmit>
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	8e b5       	in	r24, 0x2e	; 46
 1f6:	e2 5f       	subi	r30, 0xF2	; 242
 1f8:	fe 4f       	sbci	r31, 0xFE	; 254
 1fa:	80 83       	st	Z, r24
		step_transmit++;
 1fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step_transmit>
 200:	8f 5f       	subi	r24, 0xFF	; 255
 202:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <step_transmit>
		if (step_transmit > 3)
 206:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step_transmit>
 20a:	84 30       	cpi	r24, 0x04	; 4
 20c:	a8 f0       	brcs	.+42     	; 0x238 <__vector_17+0xac>
		{
			flags_avaliable &= (1 << avaliable_spi);
 20e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <flags_avaliable>
 212:	81 70       	andi	r24, 0x01	; 1
 214:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <flags_avaliable>
			PORTC |= (1 << CS_max31855);
 218:	40 9a       	sbi	0x08, 0	; 8
			step_transmit = 0;
 21a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <step_transmit>
			if ((data_max[1] & 0b00000001) == 0b00000001)
 21e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_max+0x1>
 222:	80 ff       	sbrs	r24, 0
 224:	0b c0       	rjmp	.+22     	; 0x23c <__vector_17+0xb0>
			{
				mode = 3;
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				USART_Transmit(12,0);
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	0e 94 aa 00 	call	0x154	; 0x154 <USART_Transmit>
 236:	02 c0       	rjmp	.+4      	; 0x23c <__vector_17+0xb0>
			}
		}
		else
		{
			SPDR = 0xFF;
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	8e bd       	out	0x2e, r24	; 46
		}
	}
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	bf 91       	pop	r27
 242:	af 91       	pop	r26
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	7f 91       	pop	r23
 24a:	6f 91       	pop	r22
 24c:	5f 91       	pop	r21
 24e:	4f 91       	pop	r20
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	2f 93       	push	r18
 26a:	3f 93       	push	r19
 26c:	4f 93       	push	r20
 26e:	5f 93       	push	r21
 270:	6f 93       	push	r22
 272:	7f 93       	push	r23
 274:	8f 93       	push	r24
 276:	9f 93       	push	r25
 278:	af 93       	push	r26
 27a:	bf 93       	push	r27
 27c:	ef 93       	push	r30
 27e:	ff 93       	push	r31
	counter_update_max++;
 280:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <counter_update_max>
 284:	8f 5f       	subi	r24, 0xFF	; 255
 286:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <counter_update_max>
	if (counter_update_max == 10)
 28a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <counter_update_max>
 28e:	8a 30       	cpi	r24, 0x0A	; 10
 290:	39 f4       	brne	.+14     	; 0x2a0 <__vector_16+0x42>
	{
		counter_update_max = 0;
 292:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter_update_max>
		if (!(flags_avaliable & (1 << transmit_spi)))
 296:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <flags_avaliable>
 29a:	82 ff       	sbrs	r24, 2
		{
			spi_reception_max31855();
 29c:	0e 94 a1 00 	call	0x142	; 0x142 <spi_reception_max31855>
		}
	}
}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__vector_9>:

ISR(TIMER2_OVF_vect)
{
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	8f 93       	push	r24
	counter_update_led++;
 2ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_update_led>
 2d2:	8f 5f       	subi	r24, 0xFF	; 255
 2d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter_update_led>
	if (counter_update_led == 61)//режимы мигания светодиодов
 2d8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_update_led>
 2dc:	8d 33       	cpi	r24, 0x3D	; 61
 2de:	f9 f4       	brne	.+62     	; 0x31e <__vector_9+0x5c>
	{
		counter_update_led = 0;
 2e0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter_update_led>
		switch (led_state)
 2e4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <led_state>
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	61 f0       	breq	.+24     	; 0x304 <__vector_9+0x42>
 2ec:	83 30       	cpi	r24, 0x03	; 3
 2ee:	89 f0       	breq	.+34     	; 0x312 <__vector_9+0x50>
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	a9 f4       	brne	.+42     	; 0x31e <__vector_9+0x5c>
		{
			case 1:
			if (PORTD & (1 << Led_green))
 2f4:	5e 9b       	sbis	0x0b, 6	; 11
 2f6:	03 c0       	rjmp	.+6      	; 0x2fe <__vector_9+0x3c>
			{
				PORTD &= ~(1 << Led_green);
 2f8:	5e 98       	cbi	0x0b, 6	; 11
				PORTD |= (1 << Led_red);
 2fa:	5d 9a       	sbi	0x0b, 5	; 11
 2fc:	10 c0       	rjmp	.+32     	; 0x31e <__vector_9+0x5c>
			}
			else
			{
				PORTD |= (1 << Led_green);
 2fe:	5e 9a       	sbi	0x0b, 6	; 11
				PORTD &= ~(1 << Led_red);
 300:	5d 98       	cbi	0x0b, 5	; 11
 302:	0d c0       	rjmp	.+26     	; 0x31e <__vector_9+0x5c>
			}
			break;
			case 2:
			PORTD &= ~(1 << Led_red);
 304:	5d 98       	cbi	0x0b, 5	; 11
			if (PORTD & (1 << Led_green))
 306:	5e 9b       	sbis	0x0b, 6	; 11
 308:	02 c0       	rjmp	.+4      	; 0x30e <__vector_9+0x4c>
			{
				PORTD &= ~(1 << Led_green);
 30a:	5e 98       	cbi	0x0b, 6	; 11
 30c:	08 c0       	rjmp	.+16     	; 0x31e <__vector_9+0x5c>
			}
			else
			{
				PORTD |= (1 << Led_green);
 30e:	5e 9a       	sbi	0x0b, 6	; 11
 310:	06 c0       	rjmp	.+12     	; 0x31e <__vector_9+0x5c>
			}
			break;
			case 3:
			PORTD &= ~(1 << Led_green);
 312:	5e 98       	cbi	0x0b, 6	; 11
			if (PORTD & (1 << Led_red))
 314:	5d 9b       	sbis	0x0b, 5	; 11
 316:	02 c0       	rjmp	.+4      	; 0x31c <__vector_9+0x5a>
			{
				PORTD &= ~(1 << Led_red);
 318:	5d 98       	cbi	0x0b, 5	; 11
 31a:	01 c0       	rjmp	.+2      	; 0x31e <__vector_9+0x5c>
			}
			else
			{
				PORTD |= (1 << Led_red);
 31c:	5d 9a       	sbi	0x0b, 5	; 11
			}
			break;
		}
	}
}
 31e:	8f 91       	pop	r24
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <__vector_20>:

ISR(USART_TX_vect)
{
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	8f 93       	push	r24
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
	counter_usart++;
 33a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_usart>
 33e:	8f 5f       	subi	r24, 0xFF	; 255
 340:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter_usart>
	if (counter_usart > 2)//последняя посылка
 344:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_usart>
 348:	83 30       	cpi	r24, 0x03	; 3
 34a:	68 f0       	brcs	.+26     	; 0x366 <__vector_20+0x3c>
	{
		counter_usart = 0;
 34c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter_usart>
		flags_avaliable &= ~(1 << avaliable_usart);
 350:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <flags_avaliable>
 354:	8d 7f       	andi	r24, 0xFD	; 253
 356:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <flags_avaliable>
		flags_avaliable &= ~(1 << transmit_usart);
 35a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <flags_avaliable>
 35e:	87 7f       	andi	r24, 0xF7	; 247
 360:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <flags_avaliable>
 364:	08 c0       	rjmp	.+16     	; 0x376 <__vector_20+0x4c>
	}
	else
	{
		UDR0 = data_transmit[counter_usart];// посылаем следующий пакет
 366:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <counter_usart>
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	e8 5f       	subi	r30, 0xF8	; 248
 36e:	fe 4f       	sbci	r31, 0xFE	; 254
 370:	80 81       	ld	r24, Z
 372:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
}
 376:	ff 91       	pop	r31
 378:	ef 91       	pop	r30
 37a:	8f 91       	pop	r24
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <__vector_18>:

ISR(USART_RX_vect)
{
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	2f 93       	push	r18
 392:	3f 93       	push	r19
 394:	4f 93       	push	r20
 396:	5f 93       	push	r21
 398:	6f 93       	push	r22
 39a:	7f 93       	push	r23
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
	data_recive[counter_recive] = UDR0;
 3a8:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <counter_recive>
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3b2:	e5 5f       	subi	r30, 0xF5	; 245
 3b4:	fe 4f       	sbci	r31, 0xFE	; 254
 3b6:	80 83       	st	Z, r24
	counter_recive ++;
 3b8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter_recive>
 3bc:	8f 5f       	subi	r24, 0xFF	; 255
 3be:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <counter_recive>
	if (counter_recive > 2) // если приняли все пакеты
 3c2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter_recive>
 3c6:	83 30       	cpi	r24, 0x03	; 3
 3c8:	90 f1       	brcs	.+100    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	{
		counter_recive = 0;
 3ca:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter_recive>
		switch(data_recive[0]) //смотрим, что за команда пришла
 3ce:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <data_recive>
 3d2:	82 30       	cpi	r24, 0x02	; 2
 3d4:	49 f0       	breq	.+18     	; 0x3e8 <__vector_18+0x62>
 3d6:	86 30       	cpi	r24, 0x06	; 6
 3d8:	c1 f0       	breq	.+48     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	41 f5       	brne	.+80     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		{
			case 1:
				mode = data_recive[2];
 3de:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <data_recive+0x2>
 3e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				break;
 3e6:	23 c0       	rjmp	.+70     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			case 2:
				if (mode == 3)
 3e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3ec:	83 30       	cpi	r24, 0x03	; 3
 3ee:	31 f4       	brne	.+12     	; 0x3fc <__vector_18+0x76>
				{
					USART_Transmit(12, 0);
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	8c e0       	ldi	r24, 0x0C	; 12
 3f6:	0e 94 aa 00 	call	0x154	; 0x154 <USART_Transmit>
 3fa:	19 c0       	rjmp	.+50     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
				} 
				else
				{
					USART_Transmit(0xD, temperature_avaliable());
 3fc:	0e 94 ba 00 	call	0x174	; 0x174 <temperature_avaliable>
 400:	bc 01       	movw	r22, r24
 402:	8d e0       	ldi	r24, 0x0D	; 13
 404:	0e 94 aa 00 	call	0x154	; 0x154 <USART_Transmit>
 408:	12 c0       	rjmp	.+36     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			case 4:
				break;
			case 5:// компьютер принял пакет
				break;
			case 6:
				if ((data_recive[1] == 195) && (data_recive[2] == 204)) // запрос от "своей" программы
 40a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <data_recive+0x1>
 40e:	83 3c       	cpi	r24, 0xC3	; 195
 410:	71 f4       	brne	.+28     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 412:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <data_recive+0x2>
 416:	8c 3c       	cpi	r24, 0xCC	; 204
 418:	51 f4       	brne	.+20     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
				{
					flags_avaliable |= (1 << connect);
 41a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <flags_avaliable>
 41e:	80 61       	ori	r24, 0x10	; 16
 420:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <flags_avaliable>
					USART_Transmit(0x10,0x3C33);
 424:	63 e3       	ldi	r22, 0x33	; 51
 426:	7c e3       	ldi	r23, 0x3C	; 60
 428:	80 e1       	ldi	r24, 0x10	; 16
 42a:	0e 94 aa 00 	call	0x154	; 0x154 <USART_Transmit>
				}
				break;
		}
	}
}
 42e:	ff 91       	pop	r31
 430:	ef 91       	pop	r30
 432:	bf 91       	pop	r27
 434:	af 91       	pop	r26
 436:	9f 91       	pop	r25
 438:	8f 91       	pop	r24
 43a:	7f 91       	pop	r23
 43c:	6f 91       	pop	r22
 43e:	5f 91       	pop	r21
 440:	4f 91       	pop	r20
 442:	3f 91       	pop	r19
 444:	2f 91       	pop	r18
 446:	0f 90       	pop	r0
 448:	0f be       	out	0x3f, r0	; 63
 44a:	0f 90       	pop	r0
 44c:	1f 90       	pop	r1
 44e:	18 95       	reti

00000450 <main>:

int main(void)
{
	initialization();
 450:	0e 94 48 00 	call	0x90	; 0x90 <initialization>
					spi_transmit_mcp(0b00010001,0);
				}
				while (mode == 0) {}
				break;
			case 1: //режим подготовки к измерению
				led_state = 1;
 454:	11 e0       	ldi	r17, 0x01	; 1
				while (mode == 1){}
				break;
			case 2: //режим измерения
				led_state = 2;
 456:	d2 e0       	ldi	r29, 0x02	; 2
				while (mode == 2){}
				break;
			case 3: //режим аварии
				led_state = 3;
 458:	c3 e0       	ldi	r28, 0x03	; 3
int main(void)
{
	initialization();
    while (1) 
    {
		switch(mode)
 45a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	b9 f0       	breq	.+46     	; 0x490 <main+0x40>
 462:	28 f0       	brcs	.+10     	; 0x46e <main+0x1e>
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	d9 f0       	breq	.+54     	; 0x49e <main+0x4e>
 468:	83 30       	cpi	r24, 0x03	; 3
 46a:	01 f1       	breq	.+64     	; 0x4ac <main+0x5c>
 46c:	f6 cf       	rjmp	.-20     	; 0x45a <main+0xa>
		{
			case 0: //режим простоя
				led_state = 0;
 46e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <led_state>
				PORTD |= (1 << Led_green);
 472:	5e 9a       	sbi	0x0b, 6	; 11
				PORTD &= ~(1 << Led_red);
 474:	5d 98       	cbi	0x0b, 5	; 11
				// отключаем инвертор
				if (!(flags_avaliable & (1 << avaliable_spi)))
 476:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <flags_avaliable>
 47a:	80 fd       	sbrc	r24, 0
 47c:	04 c0       	rjmp	.+8      	; 0x486 <main+0x36>
				{
					spi_transmit_mcp(0b00010001,0);
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	81 e1       	ldi	r24, 0x11	; 17
 482:	0e 94 8f 00 	call	0x11e	; 0x11e <spi_transmit_mcp>
				}
				while (mode == 0) {}
 486:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 48a:	88 23       	and	r24, r24
 48c:	e1 f3       	breq	.-8      	; 0x486 <main+0x36>
 48e:	e5 cf       	rjmp	.-54     	; 0x45a <main+0xa>
				break;
			case 1: //режим подготовки к измерению
				led_state = 1;
 490:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <led_state>
				while (mode == 1){}
 494:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	e1 f3       	breq	.-8      	; 0x494 <main+0x44>
 49c:	de cf       	rjmp	.-68     	; 0x45a <main+0xa>
				break;
			case 2: //режим измерения
				led_state = 2;
 49e:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <led_state>
				while (mode == 2){}
 4a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4a6:	82 30       	cpi	r24, 0x02	; 2
 4a8:	e1 f3       	breq	.-8      	; 0x4a2 <main+0x52>
 4aa:	d7 cf       	rjmp	.-82     	; 0x45a <main+0xa>
				break;
			case 3: //режим аварии
				led_state = 3;
 4ac:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <led_state>
				if (!(flags_avaliable & (1 << avaliable_spi)))
 4b0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <flags_avaliable>
 4b4:	80 fd       	sbrc	r24, 0
 4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <main+0x70>
				{
					spi_transmit_mcp(0b00010001,0);
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	81 e1       	ldi	r24, 0x11	; 17
 4bc:	0e 94 8f 00 	call	0x11e	; 0x11e <spi_transmit_mcp>
				}
				while(mode == 3){}
 4c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4c4:	83 30       	cpi	r24, 0x03	; 3
 4c6:	e1 f3       	breq	.-8      	; 0x4c0 <main+0x70>
 4c8:	c8 cf       	rjmp	.-112    	; 0x45a <main+0xa>

000004ca <_exit>:
 4ca:	f8 94       	cli

000004cc <__stop_program>:
 4cc:	ff cf       	rjmp	.-2      	; 0x4cc <__stop_program>
