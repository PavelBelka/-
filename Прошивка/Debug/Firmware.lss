
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000264  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800102  00800102  000002fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083f  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cf  00000000  00000000  00000bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b5  00000000  00000000  000012ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a6  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001d62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_16>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  9e:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initialization>:
	{
		while( !(UCSR0A & (1 << UDRE0))); //ожидаем опустошения буфера приема
		UDR0 = *data; //записываем данные
		data++;
	}
}
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	8a 62       	ori	r24, 0x2A	; 42
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	8e 7e       	andi	r24, 0xEE	; 238
  b0:	84 b9       	out	0x04, r24	; 4
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	80 66       	ori	r24, 0x60	; 96
  b6:	8a b9       	out	0x0a, r24	; 10
  b8:	57 98       	cbi	0x0a, 7	; 10
  ba:	87 b1       	in	r24, 0x07	; 7
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	87 b9       	out	0x07, r24	; 7
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	87 7d       	andi	r24, 0xD7	; 215
  c4:	85 b9       	out	0x05, r24	; 5
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	88 b9       	out	0x08, r24	; 8
  cc:	8c b5       	in	r24, 0x2c	; 44
  ce:	83 6d       	ori	r24, 0xD3	; 211
  d0:	8c bd       	out	0x2c, r24	; 44
  d2:	8c b5       	in	r24, 0x2c	; 44
  d4:	83 7d       	andi	r24, 0xD3	; 211
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	e0 ec       	ldi	r30, 0xC0	; 192
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	80 83       	st	Z, r24
  e2:	8f ec       	ldi	r24, 0xCF	; 207
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  ee:	e1 ec       	ldi	r30, 0xC1	; 193
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 60       	ori	r24, 0x08	; 8
  f6:	80 83       	st	Z, r24
  f8:	e2 ec       	ldi	r30, 0xC2	; 194
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8e 60       	ori	r24, 0x0E	; 14
 100:	80 83       	st	Z, r24
 102:	80 81       	ld	r24, Z
 104:	87 73       	andi	r24, 0x37	; 55
 106:	80 83       	st	Z, r24
 108:	85 b5       	in	r24, 0x25	; 37
 10a:	85 60       	ori	r24, 0x05	; 5
 10c:	85 bd       	out	0x25, r24	; 37
 10e:	ee e6       	ldi	r30, 0x6E	; 110
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 83       	st	Z, r24
 118:	78 94       	sei
 11a:	08 95       	ret

0000011c <spi_treansmit_mcp>:
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <avaliable_spi>
 122:	41 98       	cbi	0x08, 1	; 8
 124:	ec e0       	ldi	r30, 0x0C	; 12
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	80 83       	st	Z, r24
 12a:	61 83       	std	Z+1, r22	; 0x01
 12c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <transmit_spi>
 130:	80 81       	ld	r24, Z
 132:	8e bd       	out	0x2e, r24	; 46
 134:	08 95       	ret

00000136 <spi_reception_max31855>:
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <avaliable_spi>
 13c:	40 98       	cbi	0x08, 0	; 8
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	8e bd       	out	0x2e, r24	; 46
 142:	08 95       	ret

00000144 <__vector_17>:

ISR(SPI_STC_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	if (transmit_spi == 1) //проверяем отправляем ли мы данные
 154:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <transmit_spi>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	b1 f4       	brne	.+44     	; 0x188 <__vector_17+0x44>
	{
		switch(step_transmit)
 15c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <step_transmit>
 160:	88 23       	and	r24, r24
 162:	19 f0       	breq	.+6      	; 0x16a <__vector_17+0x26>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	41 f0       	breq	.+16     	; 0x178 <__vector_17+0x34>
 168:	27 c0       	rjmp	.+78     	; 0x1b8 <__vector_17+0x74>
		{
			case 0:
				SPDR = data_mcp[1]; // отправляем 2 пакет данных
 16a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <data_mcp+0x1>
 16e:	8e bd       	out	0x2e, r24	; 46
				step_transmit = 1; // следующий шаг в отправке
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <step_transmit>
				break;
 176:	20 c0       	rjmp	.+64     	; 0x1b8 <__vector_17+0x74>
			case 1: //завершаем отправку
				PORTC |= (1 << CS_mcp41010); // отжимаем CS от земли
 178:	41 9a       	sbi	0x08, 1	; 8
				step_transmit = 0;
 17a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <step_transmit>
				avaliable_spi = 0; // SPI свободен
 17e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <avaliable_spi>
				transmit_spi = 0; // больше отправлять не будем
 182:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <transmit_spi>
				break;
 186:	18 c0       	rjmp	.+48     	; 0x1b8 <__vector_17+0x74>
		}	
	}
	else
	{
		data_max[counter_recive] = SPDR;
 188:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <counter_recive>
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	8e b5       	in	r24, 0x2e	; 46
 190:	e8 5f       	subi	r30, 0xF8	; 248
 192:	fe 4f       	sbci	r31, 0xFE	; 254
 194:	80 83       	st	Z, r24
		counter_recive++;
 196:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_recive>
 19a:	8f 5f       	subi	r24, 0xFF	; 255
 19c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter_recive>
		if (counter_recive > 3)
 1a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_recive>
 1a4:	84 30       	cpi	r24, 0x04	; 4
 1a6:	30 f0       	brcs	.+12     	; 0x1b4 <__vector_17+0x70>
		{
			avaliable_spi = 0;
 1a8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <avaliable_spi>
			PORTC |= (1 << CS_max31855);
 1ac:	40 9a       	sbi	0x08, 0	; 8
			counter_recive = 0;
 1ae:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter_recive>
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <__vector_17+0x74>
		}
		else
		{
			SPDR = 0xFF;
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	8e bd       	out	0x2e, r24	; 46
		}
	}
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	8f 91       	pop	r24
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	counter_update_max++;
 1ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if (counter_update_max == 61)
 1fc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 200:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 204:	cd 97       	sbiw	r24, 0x3d	; 61
 206:	51 f4       	brne	.+20     	; 0x21c <__vector_16+0x54>
	{
		if (avaliable_spi == 0)
 208:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <avaliable_spi>
 20c:	81 11       	cpse	r24, r1
 20e:	06 c0       	rjmp	.+12     	; 0x21c <__vector_16+0x54>
		{
			counter_update_max = 0;
 210:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 214:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			spi_reception_max31855();
 218:	0e 94 9b 00 	call	0x136	; 0x136 <spi_reception_max31855>
		}
	}
}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <main>:

int main(void)
{
	initialization();
 23e:	0e 94 53 00 	call	0xa6	; 0xa6 <initialization>
    while (1) 
    {
		switch(mode)
 242:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 246:	81 11       	cpse	r24, r1
 248:	fe cf       	rjmp	.-4      	; 0x246 <main+0x8>
		{
			case 0: //режим простоя
				PORTD |= (1 << Led_green);
 24a:	5e 9a       	sbi	0x0b, 6	; 11
				PORTD &= ~(1 << Led_red);
 24c:	5d 98       	cbi	0x0b, 5	; 11
				// отключаем инвертор
				if (avaliable_spi == 0)
 24e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <avaliable_spi>
 252:	81 11       	cpse	r24, r1
 254:	f6 cf       	rjmp	.-20     	; 0x242 <main+0x4>
				{
					spi_treansmit_mcp(0b00010001,0);
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	81 e1       	ldi	r24, 0x11	; 17
 25a:	0e 94 8e 00 	call	0x11c	; 0x11c <spi_treansmit_mcp>
					break;
 25e:	f1 cf       	rjmp	.-30     	; 0x242 <main+0x4>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
