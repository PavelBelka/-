
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000056a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800100  00800100  0000056a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000056a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ac  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ed  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000057e  00000000  00000000  000016dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00001c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d0  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c0  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_9>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_16>
  44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_17>
  48:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_18>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_20>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	f6 01       	movw	r30, r12
  6a:	fb 01       	movw	r30, r22
  6c:	2f 02       	muls	r18, r31
  6e:	2f 02       	muls	r18, r31
  70:	0d 02       	muls	r16, r29
  72:	12 02       	muls	r17, r18
  74:	17 02       	muls	r17, r23

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a5 31       	cpi	r26, 0x15	; 21
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 40 02 	call	0x480	; 0x480 <main>
  96:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <initialization>:
volatile uint8_t mode = 0; // режим работы

void initialization()
{
	// Настройка порта B: PB0 - вход, PB1 - выход, (SCK, MOSI) - выход, MISO - вход
	DDRB |= (1 << PORTB1) | (1 << SPI_sck) | (1 << SPI_mosi) | (1 << PORTB2);
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	8e 62       	ori	r24, 0x2E	; 46
  a2:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~((1 << PORTB0) | (1 << SPI_miso));
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	8e 7e       	andi	r24, 0xEE	; 238
  a8:	84 b9       	out	0x04, r24	; 4
	// Настройка порта D: PD7, PD0 - вход, PD6, PD5, PD1 - выход
	DDRD |= (1 << PORTD6) | (1 << PORTD5);
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	80 66       	ori	r24, 0x60	; 96
  ae:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PORTD7);
  b0:	57 98       	cbi	0x0a, 7	; 10
	// Настройка порта C: PC0 - выход, PC1 - выход
	DDRC |= (1 << CS_max31855) | (1 << CS_mcp41010);
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	83 60       	ori	r24, 0x03	; 3
  b6:	87 b9       	out	0x07, r24	; 7
	PORTB &= ~((1 << SPI_sck) | (1 << SPI_mosi));
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	87 7d       	andi	r24, 0xD7	; 215
  bc:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1 << CS_mcp41010) | (1 << CS_max31855);
  be:	88 b1       	in	r24, 0x08	; 8
  c0:	83 60       	ori	r24, 0x03	; 3
  c2:	88 b9       	out	0x08, r24	; 8
	// Настройка SPI: делитель на 128, режим master, прерывание включены
	SPCR |= (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << SPR1);
  c4:	8c b5       	in	r24, 0x2c	; 44
  c6:	83 6d       	ori	r24, 0xD3	; 211
  c8:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~((1 << CPOL) | (1 << CPHA) | (1 << DORD));
  ca:	8c b5       	in	r24, 0x2c	; 44
  cc:	83 7d       	andi	r24, 0xD3	; 211
  ce:	8c bd       	out	0x2c, r24	; 44
	// Настройка USART: асинхронный режим, 8 бит посылка, 1 стоп-бит, контроль четности отключен, скорость 19200 бод, прерывание по приему
	UBRR0 = 25;
  d0:	89 e1       	ldi	r24, 0x19	; 25
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << TXCIE0) | (1 << RXCIE0);
  dc:	e1 ec       	ldi	r30, 0xC1	; 193
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	88 6d       	ori	r24, 0xD8	; 216
  e4:	80 83       	st	Z, r24
	UCSR0C |= (0 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00);
  e6:	e2 ec       	ldi	r30, 0xC2	; 194
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	86 60       	ori	r24, 0x06	; 6
  ee:	80 83       	st	Z, r24
	// Настройка таймера 0: предделитель на 1024, прерывание по переполнению включен
	TCCR0B |= (1 << CS02) | (1 << CS00);
  f0:	85 b5       	in	r24, 0x25	; 37
  f2:	85 60       	ori	r24, 0x05	; 5
  f4:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);
  f6:	ee e6       	ldi	r30, 0x6E	; 110
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	80 83       	st	Z, r24
	// Настройка таймера 2: предделитель на 1024, прерывание по переполнению включен
	TCCR2B |= (1 << CS00) | (1 << CS01) | (1 << CS02);
 100:	e1 eb       	ldi	r30, 0xB1	; 177
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	87 60       	ori	r24, 0x07	; 7
 108:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2);
 10a:	e0 e7       	ldi	r30, 0x70	; 112
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	81 60       	ori	r24, 0x01	; 1
 112:	80 83       	st	Z, r24
	sei();
 114:	78 94       	sei
 116:	08 95       	ret

00000118 <spi_transmit_mcp>:
}

void spi_transmit_mcp(uint8_t command, uint8_t data)//отправка по spi на mcp41010
{
	data_mcp[0] = command;
 118:	e3 e1       	ldi	r30, 0x13	; 19
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	80 83       	st	Z, r24
	data_mcp[1] = data;
 11e:	61 83       	std	Z+1, r22	; 0x01
	if (flags_status & (1 << induced_spi)) // проверяем шину spi на вызов, если да
 120:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 124:	80 ff       	sbrs	r24, 0
 126:	08 c0       	rjmp	.+16     	; 0x138 <spi_transmit_mcp+0x20>
	{
		//PORTC &= ~(1 << CS_mcp41010); //прижимаем CS к земле
		counter_transmit_mcp = 0;
 128:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <counter_transmit_mcp>
		flags_status |= (1 << avaliable_spi_mcp); // говорим, хотим передать на mcp
 12c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 130:	82 60       	ori	r24, 0x02	; 2
 132:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flags_status>
 136:	08 95       	ret
	}
	else //а если не вызвана, то вызывем ее
	{
		PORTC &= ~(1 << CS_mcp41010); //прижимаем CS к земле
 138:	41 98       	cbi	0x08, 1	; 8
		flags_status |= (1 << induced_spi); // говорим, что мы вызвали
 13a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flags_status>
		flags_status |= (1 << avaliable_spi_mcp); // говорим, хотим передать на mcp
 144:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flags_status>
		counter_transmit_mcp = 1;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <counter_transmit_mcp>
		SPDR = data_mcp[0]; // отправляем 1 пакет данных
 154:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <data_mcp>
 158:	8e bd       	out	0x2e, r24	; 46
 15a:	08 95       	ret

0000015c <spi_reception_max31855>:
	}
}

void spi_reception_max31855()
{
		if (flags_status & (1 << induced_spi)) // проверяем шину spi на вызов, если да
 15c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 160:	80 ff       	sbrs	r24, 0
 162:	08 c0       	rjmp	.+16     	; 0x174 <spi_reception_max31855+0x18>
		{
			//PORTC &= ~(1 << CS_mcp41010); //прижимаем CS к земле
			counter_transmit_max = 0;
 164:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <counter_transmit_max>
			flags_status |= (1 << avaliable_spi_mcp); // говорим, хотим передать на mcp
 168:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 16c:	82 60       	ori	r24, 0x02	; 2
 16e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flags_status>
 172:	08 95       	ret
		}
		else //а если не вызвана, то вызывем ее
		{
			PORTC &= ~(1 << CS_max31855); //прижимаем CS к земле
 174:	40 98       	cbi	0x08, 0	; 8
			flags_status |= (1 << induced_spi); // говорим, что мы вызвали
 176:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flags_status>
			flags_status |= (1 << avaliable_spi_max); // говорим, хотим принять с max
 180:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 184:	84 60       	ori	r24, 0x04	; 4
 186:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flags_status>
			counter_transmit_max = 0;
 18a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <counter_transmit_max>
			SPDR = 0x01; // отправляем 1 пакет данных
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	8e bd       	out	0x2e, r24	; 46
 192:	08 95       	ret

00000194 <USART_Transmit>:
}

void USART_Transmit(uint8_t command, uint8_t data_high, uint8_t data_low) // передача команды и данных по uart
{
	//делим на пакеты
	data_transmit[0] = command;
 194:	e9 e0       	ldi	r30, 0x09	; 9
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	80 83       	st	Z, r24
	data_transmit[1] = data_high;
 19a:	61 83       	std	Z+1, r22	; 0x01
	data_transmit[2] = data_low;
 19c:	42 83       	std	Z+2, r20	; 0x02
	flags_status |= (1 << avaliable_usart); // говорим что занят uart
 19e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 1a2:	88 60       	ori	r24, 0x08	; 8
 1a4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flags_status>
	counter_usart = 0;
 1a8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter_usart>
	UDR0 = data_transmit[0]; //записываем данные
 1ac:	80 81       	ld	r24, Z
 1ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1b2:	08 95       	ret

000001b4 <__vector_17>:
}

ISR(SPI_STC_vect) // прервыание об окончании действия на spi
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	if (flags_status & (1 << avaliable_spi_max)) // если мы хотим принять
 1c4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 1c8:	82 ff       	sbrs	r24, 2
 1ca:	18 c0       	rjmp	.+48     	; 0x1fc <__vector_17+0x48>
	{
		if (counter_transmit_max < 4)
 1cc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <counter_transmit_max>
 1d0:	84 30       	cpi	r24, 0x04	; 4
 1d2:	70 f4       	brcc	.+28     	; 0x1f0 <__vector_17+0x3c>
		{
			PORTC &= ~(1 << CS_max31855);
 1d4:	40 98       	cbi	0x08, 0	; 8
			data_max[counter_transmit_max] = SPDR;
 1d6:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <counter_transmit_max>
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	8e b5       	in	r24, 0x2e	; 46
 1de:	e1 5f       	subi	r30, 0xF1	; 241
 1e0:	fe 4f       	sbci	r31, 0xFE	; 254
 1e2:	80 83       	st	Z, r24
			counter_transmit_max++;
 1e4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <counter_transmit_max>
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
 1ea:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <counter_transmit_max>
 1ee:	06 c0       	rjmp	.+12     	; 0x1fc <__vector_17+0x48>
		}
		else
		{
			flags_status &= ~(1 << avaliable_spi_max);
 1f0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 1f4:	8b 7f       	andi	r24, 0xFB	; 251
 1f6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flags_status>
			PORTC |= (1 << CS_max31855);
 1fa:	40 9a       	sbi	0x08, 0	; 8
		}
	}
	if (flags_status & (1 << avaliable_spi_mcp)) //смотрим на готовность отправлять на mcp
 1fc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 200:	81 ff       	sbrs	r24, 1
 202:	19 c0       	rjmp	.+50     	; 0x236 <__vector_17+0x82>
	{											  // если да, то отправляем
		if (counter_transmit_mcp < 2) // отправлем данные
 204:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <counter_transmit_mcp>
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	70 f4       	brcc	.+28     	; 0x228 <__vector_17+0x74>
		{
			PORTC &= ~(1 << CS_mcp41010); //костыль(
 20c:	41 98       	cbi	0x08, 1	; 8
			SPDR = data_mcp[counter_transmit_mcp];
 20e:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <counter_transmit_mcp>
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	ed 5e       	subi	r30, 0xED	; 237
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	80 81       	ld	r24, Z
 21a:	8e bd       	out	0x2e, r24	; 46
			counter_transmit_mcp++;
 21c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <counter_transmit_mcp>
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <counter_transmit_mcp>
 226:	0d c0       	rjmp	.+26     	; 0x242 <__vector_17+0x8e>
		}
		else // после последней отправки заходим еще раз сюда и заканчиваем
		{
			flags_status &= ~(1 << avaliable_spi_mcp);
 228:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 22c:	8d 7f       	andi	r24, 0xFD	; 253
 22e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flags_status>
			PORTC |= (1 << CS_mcp41010);
 232:	41 9a       	sbi	0x08, 1	; 8
 234:	06 c0       	rjmp	.+12     	; 0x242 <__vector_17+0x8e>
		}
	}
	else if (flags_status & (1 << avaliable_spi_max)) // иначе просто шлем данные(для max)
 236:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 23a:	82 ff       	sbrs	r24, 2
 23c:	02 c0       	rjmp	.+4      	; 0x242 <__vector_17+0x8e>
	{
		SPDR = 0x01;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	8e bd       	out	0x2e, r24	; 46
	}
	if (!(flags_status & ((1 << avaliable_spi_mcp) | (1 << avaliable_spi_max))) && (flags_status & (1 << induced_spi)))
 242:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 246:	86 70       	andi	r24, 0x06	; 6
 248:	49 f4       	brne	.+18     	; 0x25c <__vector_17+0xa8>
 24a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 24e:	80 ff       	sbrs	r24, 0
 250:	05 c0       	rjmp	.+10     	; 0x25c <__vector_17+0xa8>
	{
		flags_status &= ~(1 << induced_spi);
 252:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 256:	8e 7f       	andi	r24, 0xFE	; 254
 258:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flags_status>
		else
		{
			SPDR = 0xFF;
		}
	}*/
}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	8f 91       	pop	r24
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	4f 93       	push	r20
 27c:	5f 93       	push	r21
 27e:	6f 93       	push	r22
 280:	7f 93       	push	r23
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
	counter_update_max++;
 28e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <counter_update_max>
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <counter_update_max>
	if (counter_update_max == 9)
 298:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <counter_update_max>
 29c:	89 30       	cpi	r24, 0x09	; 9
 29e:	39 f4       	brne	.+14     	; 0x2ae <__vector_16+0x42>
	{
		counter_update_max = 0;
 2a0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter_update_max>
		if (!(flags_status & (1 << transmit_spi)))
 2a4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 2a8:	84 ff       	sbrs	r24, 4
		{
			spi_reception_max31855();
 2aa:	0e 94 ae 00 	call	0x15c	; 0x15c <spi_reception_max31855>
		}
	}
}
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	bf 91       	pop	r27
 2b4:	af 91       	pop	r26
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	7f 91       	pop	r23
 2bc:	6f 91       	pop	r22
 2be:	5f 91       	pop	r21
 2c0:	4f 91       	pop	r20
 2c2:	3f 91       	pop	r19
 2c4:	2f 91       	pop	r18
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <__vector_9>:

ISR(TIMER2_OVF_vect)
{
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	8f 93       	push	r24
	counter_update_led++;
 2dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_update_led>
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter_update_led>
	if (counter_update_led == 61)//режимы мигания светодиодов
 2e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_update_led>
 2ea:	8d 33       	cpi	r24, 0x3D	; 61
 2ec:	f9 f4       	brne	.+62     	; 0x32c <__vector_9+0x5c>
	{
		counter_update_led = 0;
 2ee:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter_update_led>
		switch (led_state)
 2f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <led_state>
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	61 f0       	breq	.+24     	; 0x312 <__vector_9+0x42>
 2fa:	83 30       	cpi	r24, 0x03	; 3
 2fc:	89 f0       	breq	.+34     	; 0x320 <__vector_9+0x50>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	a9 f4       	brne	.+42     	; 0x32c <__vector_9+0x5c>
		{
			case 1:
				if (PORTD & (1 << Led_green))
 302:	5e 9b       	sbis	0x0b, 6	; 11
 304:	03 c0       	rjmp	.+6      	; 0x30c <__vector_9+0x3c>
				{
					PORTD &= ~(1 << Led_green);
 306:	5e 98       	cbi	0x0b, 6	; 11
					PORTD |= (1 << Led_red);
 308:	5d 9a       	sbi	0x0b, 5	; 11
 30a:	10 c0       	rjmp	.+32     	; 0x32c <__vector_9+0x5c>
				}
				else
				{
					PORTD |= (1 << Led_green);
 30c:	5e 9a       	sbi	0x0b, 6	; 11
					PORTD &= ~(1 << Led_red);
 30e:	5d 98       	cbi	0x0b, 5	; 11
 310:	0d c0       	rjmp	.+26     	; 0x32c <__vector_9+0x5c>
				}
				break;
			case 2:
				PORTD &= ~(1 << Led_red);
 312:	5d 98       	cbi	0x0b, 5	; 11
				if (PORTD & (1 << Led_green))
 314:	5e 9b       	sbis	0x0b, 6	; 11
 316:	02 c0       	rjmp	.+4      	; 0x31c <__vector_9+0x4c>
				{
					PORTD &= ~(1 << Led_green);
 318:	5e 98       	cbi	0x0b, 6	; 11
 31a:	08 c0       	rjmp	.+16     	; 0x32c <__vector_9+0x5c>
				}
				else
				{
					PORTD |= (1 << Led_green);
 31c:	5e 9a       	sbi	0x0b, 6	; 11
 31e:	06 c0       	rjmp	.+12     	; 0x32c <__vector_9+0x5c>
				}
				break;
			case 3:
				PORTD &= ~(1 << Led_green);
 320:	5e 98       	cbi	0x0b, 6	; 11
				if (PORTD & (1 << Led_red))
 322:	5d 9b       	sbis	0x0b, 5	; 11
 324:	02 c0       	rjmp	.+4      	; 0x32a <__vector_9+0x5a>
				{
					PORTD &= ~(1 << Led_red);
 326:	5d 98       	cbi	0x0b, 5	; 11
 328:	01 c0       	rjmp	.+2      	; 0x32c <__vector_9+0x5c>
				}
				else
				{
					PORTD |= (1 << Led_red);
 32a:	5d 9a       	sbi	0x0b, 5	; 11
				}
				break;
		}
	}
}
 32c:	8f 91       	pop	r24
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <__vector_20>:

ISR(USART_TX_vect)
{
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	8f 93       	push	r24
 344:	ef 93       	push	r30
 346:	ff 93       	push	r31
	counter_usart++;
 348:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_usart>
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter_usart>
	if (counter_usart > 2)//последняя посылка
 352:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_usart>
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	30 f0       	brcs	.+12     	; 0x366 <__vector_20+0x2e>
	{
		//flags_avaliable &= ~(1 << avaliable_usart);
		flags_status &= ~(1 << transmit_usart);
 35a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 35e:	8f 7d       	andi	r24, 0xDF	; 223
 360:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flags_status>
 364:	08 c0       	rjmp	.+16     	; 0x376 <__vector_20+0x3e>
	}
	else
	{
		UDR0 = data_transmit[counter_usart];// посылаем следующий пакет
 366:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <counter_usart>
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	e7 5f       	subi	r30, 0xF7	; 247
 36e:	fe 4f       	sbci	r31, 0xFE	; 254
 370:	80 81       	ld	r24, Z
 372:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
}
 376:	ff 91       	pop	r31
 378:	ef 91       	pop	r30
 37a:	8f 91       	pop	r24
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <__vector_18>:

ISR(USART_RX_vect)
{
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	2f 93       	push	r18
 392:	3f 93       	push	r19
 394:	4f 93       	push	r20
 396:	5f 93       	push	r21
 398:	6f 93       	push	r22
 39a:	7f 93       	push	r23
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
	data_recive[counter_recive] = UDR0;
 3a8:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <counter_recive>
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3b2:	e4 5f       	subi	r30, 0xF4	; 244
 3b4:	fe 4f       	sbci	r31, 0xFE	; 254
 3b6:	80 83       	st	Z, r24
	counter_recive ++;
 3b8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter_recive>
 3bc:	8f 5f       	subi	r24, 0xFF	; 255
 3be:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <counter_recive>
	if (counter_recive > 2) // если приняли все пакеты
 3c2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter_recive>
 3c6:	83 30       	cpi	r24, 0x03	; 3
 3c8:	08 f4       	brcc	.+2      	; 0x3cc <__vector_18+0x46>
 3ca:	49 c0       	rjmp	.+146    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	{
		counter_recive = 0;
 3cc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter_recive>
		switch(data_recive[0]) //смотрим, что за команда пришла
 3d0:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <data_recive>
 3d4:	8e 2f       	mov	r24, r30
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	fc 01       	movw	r30, r24
 3da:	e1 54       	subi	r30, 0x41	; 65
 3dc:	f1 09       	sbc	r31, r1
 3de:	e7 30       	cpi	r30, 0x07	; 7
 3e0:	f1 05       	cpc	r31, r1
 3e2:	c0 f5       	brcc	.+112    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 3e4:	ec 5c       	subi	r30, 0xCC	; 204
 3e6:	ff 4f       	sbci	r31, 0xFF	; 255
 3e8:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__tablejump2__>
		{
			case 65:
				mode = data_recive[2];
 3ec:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <data_recive+0x2>
 3f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				break;
 3f4:	34 c0       	rjmp	.+104    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			case 66:
				if (mode == 3)
 3f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3fa:	83 30       	cpi	r24, 0x03	; 3
 3fc:	31 f4       	brne	.+12     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
				{
					USART_Transmit(86, 33, 33);
 3fe:	41 e2       	ldi	r20, 0x21	; 33
 400:	61 e2       	ldi	r22, 0x21	; 33
 402:	86 e5       	ldi	r24, 0x56	; 86
 404:	0e 94 ca 00 	call	0x194	; 0x194 <USART_Transmit>
 408:	2a c0       	rjmp	.+84     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				} 
				else
				{
					USART_Transmit(87, data_max[0], data_max[1]);
 40a:	ef e0       	ldi	r30, 0x0F	; 15
 40c:	f1 e0       	ldi	r31, 0x01	; 1
 40e:	41 81       	ldd	r20, Z+1	; 0x01
 410:	60 81       	ld	r22, Z
 412:	87 e5       	ldi	r24, 0x57	; 87
 414:	0e 94 ca 00 	call	0x194	; 0x194 <USART_Transmit>
 418:	22 c0       	rjmp	.+68     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			case 67:
				break;
			case 68:
				break;
			case 69:
				spi_transmit_mcp(0b00010001, 255);
 41a:	6f ef       	ldi	r22, 0xFF	; 255
 41c:	81 e1       	ldi	r24, 0x11	; 17
 41e:	0e 94 8c 00 	call	0x118	; 0x118 <spi_transmit_mcp>
				break;
 422:	1d c0       	rjmp	.+58     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			case 70:
				spi_transmit_mcp(0b00010001, 0);
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	81 e1       	ldi	r24, 0x11	; 17
 428:	0e 94 8c 00 	call	0x118	; 0x118 <spi_transmit_mcp>
				break;
 42c:	18 c0       	rjmp	.+48     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			case 71:
				if ((data_recive[1] == 89) && (data_recive[2] == 66)) // запрос от "своей" программы
 42e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <data_recive+0x1>
 432:	89 35       	cpi	r24, 0x59	; 89
 434:	a1 f4       	brne	.+40     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 436:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <data_recive+0x2>
 43a:	82 34       	cpi	r24, 0x42	; 66
 43c:	81 f4       	brne	.+32     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				{
					flags_status |= (1 << connect);
 43e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 442:	80 64       	ori	r24, 0x40	; 64
 444:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flags_status>
					USART_Transmit('A',0x56, 0x45);
 448:	45 e4       	ldi	r20, 0x45	; 69
 44a:	66 e5       	ldi	r22, 0x56	; 86
 44c:	81 e4       	ldi	r24, 0x41	; 65
 44e:	0e 94 ca 00 	call	0x194	; 0x194 <USART_Transmit>
 452:	05 c0       	rjmp	.+10     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				}
				break;
			default:
				USART_Transmit('E', 0x72, 0x72);
 454:	42 e7       	ldi	r20, 0x72	; 114
 456:	62 e7       	ldi	r22, 0x72	; 114
 458:	85 e4       	ldi	r24, 0x45	; 69
 45a:	0e 94 ca 00 	call	0x194	; 0x194 <USART_Transmit>
				break;
		}
	}
}
 45e:	ff 91       	pop	r31
 460:	ef 91       	pop	r30
 462:	bf 91       	pop	r27
 464:	af 91       	pop	r26
 466:	9f 91       	pop	r25
 468:	8f 91       	pop	r24
 46a:	7f 91       	pop	r23
 46c:	6f 91       	pop	r22
 46e:	5f 91       	pop	r21
 470:	4f 91       	pop	r20
 472:	3f 91       	pop	r19
 474:	2f 91       	pop	r18
 476:	0f 90       	pop	r0
 478:	0f be       	out	0x3f, r0	; 63
 47a:	0f 90       	pop	r0
 47c:	1f 90       	pop	r1
 47e:	18 95       	reti

00000480 <main>:


int main(void)
{
	initialization();
 480:	0e 94 4f 00 	call	0x9e	; 0x9e <initialization>
					//spi_transmit_mcp(0b00010001,0);
				}
				while (mode == 1){}
				break;
			case 1: //режим подготовки к измерению
				led_state = 1;
 484:	11 e0       	ldi	r17, 0x01	; 1
				break;
			case 2: //режим измерения
				led_state = 2;
 486:	d2 e0       	ldi	r29, 0x02	; 2
				while (mode == 2){}
				break;
			case 3: //режим аварии
				led_state = 3;
 488:	c3 e0       	ldi	r28, 0x03	; 3
int main(void)
{
	initialization();
    while (1) 
    {
		switch(mode)
 48a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	89 f0       	breq	.+34     	; 0x4b4 <main+0x34>
 492:	28 f0       	brcs	.+10     	; 0x49e <main+0x1e>
 494:	82 30       	cpi	r24, 0x02	; 2
 496:	89 f0       	breq	.+34     	; 0x4ba <main+0x3a>
 498:	83 30       	cpi	r24, 0x03	; 3
 49a:	b1 f0       	breq	.+44     	; 0x4c8 <main+0x48>
 49c:	f6 cf       	rjmp	.-20     	; 0x48a <main+0xa>
		{
			case 0: //режим простоя
				led_state = 0;
 49e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <led_state>
				PORTD |= (1 << Led_green);
 4a2:	5e 9a       	sbi	0x0b, 6	; 11
				PORTD &= ~(1 << Led_red);
 4a4:	5d 98       	cbi	0x0b, 5	; 11
				// отключаем инвертор
				if (!(flags_status & (1 << induced_spi)))
 4a6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
				{
					//spi_transmit_mcp(0b00010001,0);
				}
				while (mode == 1){}
 4aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	e1 f3       	breq	.-8      	; 0x4aa <main+0x2a>
 4b2:	eb cf       	rjmp	.-42     	; 0x48a <main+0xa>
				break;
			case 1: //режим подготовки к измерению
				led_state = 1;
 4b4:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <led_state>
				break;
 4b8:	e8 cf       	rjmp	.-48     	; 0x48a <main+0xa>
			case 2: //режим измерения
				led_state = 2;
 4ba:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <led_state>
				while (mode == 2){}
 4be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4c2:	82 30       	cpi	r24, 0x02	; 2
 4c4:	e1 f3       	breq	.-8      	; 0x4be <main+0x3e>
 4c6:	e1 cf       	rjmp	.-62     	; 0x48a <main+0xa>
				break;
			case 3: //режим аварии
				led_state = 3;
 4c8:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <led_state>
				if (!(flags_status & (1 << induced_spi)))
 4cc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flags_status>
 4d0:	80 fd       	sbrc	r24, 0
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <main+0x5c>
				{
					spi_transmit_mcp(0b00010001,0);
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	81 e1       	ldi	r24, 0x11	; 17
 4d8:	0e 94 8c 00 	call	0x118	; 0x118 <spi_transmit_mcp>
				}
				while (mode == 3){}
 4dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4e0:	83 30       	cpi	r24, 0x03	; 3
 4e2:	e1 f3       	breq	.-8      	; 0x4dc <main+0x5c>
 4e4:	d2 cf       	rjmp	.-92     	; 0x48a <main+0xa>

000004e6 <__tablejump2__>:
 4e6:	ee 0f       	add	r30, r30
 4e8:	ff 1f       	adc	r31, r31
 4ea:	05 90       	lpm	r0, Z+
 4ec:	f4 91       	lpm	r31, Z
 4ee:	e0 2d       	mov	r30, r0
 4f0:	09 94       	ijmp

000004f2 <_exit>:
 4f2:	f8 94       	cli

000004f4 <__stop_program>:
 4f4:	ff cf       	rjmp	.-2      	; 0x4f4 <__stop_program>
