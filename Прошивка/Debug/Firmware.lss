
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  00000432  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009bb  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fc  00000000  00000000  00000ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d9  00000000  00000000  000015cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00001aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bf  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022c  00000000  00000000  000020b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000022e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_16>
  44:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_17>
  48:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_20>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 31       	cpi	r26, 0x13	; 19
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a1 01 	call	0x342	; 0x342 <main>
  88:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initialization>:
	flags_avaliable |= (1 << transmit_spi); // сообщаем, что занимаемся отправкой
	SPDR = data_mcp[0]; // отправляем 1 пакет данных
}

void spi_reception_max31855()
{
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8a 62       	ori	r24, 0x2A	; 42
  94:	84 b9       	out	0x04, r24	; 4
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8e 7e       	andi	r24, 0xEE	; 238
  9a:	84 b9       	out	0x04, r24	; 4
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	80 66       	ori	r24, 0x60	; 96
  a0:	8a b9       	out	0x0a, r24	; 10
  a2:	57 98       	cbi	0x0a, 7	; 10
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	87 b9       	out	0x07, r24	; 7
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	87 7d       	andi	r24, 0xD7	; 215
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	83 60       	ori	r24, 0x03	; 3
  b4:	88 b9       	out	0x08, r24	; 8
  b6:	e0 ec       	ldi	r30, 0xC0	; 192
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 83       	st	Z, r24
  c0:	87 e6       	ldi	r24, 0x67	; 103
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 6d       	ori	r24, 0xD8	; 216
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	8e 60       	ori	r24, 0x0E	; 14
  de:	80 83       	st	Z, r24
  e0:	80 81       	ld	r24, Z
  e2:	87 73       	andi	r24, 0x37	; 55
  e4:	80 83       	st	Z, r24
  e6:	78 94       	sei
  e8:	08 95       	ret

000000ea <spi_transmit_mcp>:
  ea:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <flags_avaliable>
  ee:	91 60       	ori	r25, 0x01	; 1
  f0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <flags_avaliable>
  f4:	e1 e1       	ldi	r30, 0x11	; 17
  f6:	f1 e0       	ldi	r31, 0x01	; 1
  f8:	80 83       	st	Z, r24
  fa:	61 83       	std	Z+1, r22	; 0x01
  fc:	41 98       	cbi	0x08, 1	; 8
  fe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flags_avaliable>
 102:	84 60       	ori	r24, 0x04	; 4
 104:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flags_avaliable>
 108:	80 81       	ld	r24, Z
 10a:	8e bd       	out	0x2e, r24	; 46
 10c:	08 95       	ret

0000010e <USART_Transmit>:
}

void USART_Transmit(uint8_t command, uint16_t data) // передача команды и данных по uart
{
	//делим на пакеты
	data_transmit[0] = command;
 10e:	e7 e0       	ldi	r30, 0x07	; 7
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	80 83       	st	Z, r24
	//data_transmit[1] = data;
	data_transmit[1] = data >> 8;
 114:	71 83       	std	Z+1, r23	; 0x01
	data_transmit[2] = data & 0xFF;
 116:	62 83       	std	Z+2, r22	; 0x02
	flags_avaliable |= (1 << avaliable_usart); // говорим что занят uart
 118:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flags_avaliable>
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flags_avaliable>
	counter_usart = 0;
 122:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter_usart>
	UDR0 = data_transmit[0]; //записываем данные
 126:	80 81       	ld	r24, Z
 128:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 12c:	08 95       	ret

0000012e <temperature_avaliable>:
}

volatile uint16_t temperature_avaliable()
{
	uint16_t temp = (data_max[0] << 4) | (data_max[1] >>4);
 12e:	ed e0       	ldi	r30, 0x0D	; 13
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	80 81       	ld	r24, Z
 134:	21 81       	ldd	r18, Z+1	; 0x01
	return temp;
 136:	30 e1       	ldi	r19, 0x10	; 16
 138:	83 9f       	mul	r24, r19
 13a:	c0 01       	movw	r24, r0
 13c:	11 24       	eor	r1, r1
 13e:	22 95       	swap	r18
 140:	2f 70       	andi	r18, 0x0F	; 15
}
 142:	82 2b       	or	r24, r18
 144:	08 95       	ret

00000146 <__vector_17>:

ISR(SPI_STC_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
		else
		{
			SPDR = 0xFF;
		}
	}*/
}
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
	counter_update_max++;
 166:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <counter_update_max>
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <counter_update_max>
	if (counter_update_max == 9)
 170:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <counter_update_max>
 174:	89 30       	cpi	r24, 0x09	; 9
 176:	21 f4       	brne	.+8      	; 0x180 <__vector_16+0x26>
	{
		counter_update_max = 0;
 178:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter_update_max>
		if (!(flags_avaliable & (1 << transmit_spi)))
 17c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flags_avaliable>
		{
			spi_reception_max31855();
		}
	}
}
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <__vector_9>:

ISR(TIMER2_OVF_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	8f 93       	push	r24
	counter_update_led++;
 198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_update_led>
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter_update_led>
	if (counter_update_led == 61)//режимы мигания светодиодов
 1a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_update_led>
 1a6:	8d 33       	cpi	r24, 0x3D	; 61
 1a8:	f9 f4       	brne	.+62     	; 0x1e8 <__vector_9+0x5c>
	{
		counter_update_led = 0;
 1aa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter_update_led>
		switch (led_state)
 1ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <led_state>
 1b2:	82 30       	cpi	r24, 0x02	; 2
 1b4:	61 f0       	breq	.+24     	; 0x1ce <__vector_9+0x42>
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	89 f0       	breq	.+34     	; 0x1dc <__vector_9+0x50>
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	a9 f4       	brne	.+42     	; 0x1e8 <__vector_9+0x5c>
		{
			case 1:
			if (PORTD & (1 << Led_green))
 1be:	5e 9b       	sbis	0x0b, 6	; 11
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <__vector_9+0x3c>
			{
				PORTD &= ~(1 << Led_green);
 1c2:	5e 98       	cbi	0x0b, 6	; 11
				PORTD |= (1 << Led_red);
 1c4:	5d 9a       	sbi	0x0b, 5	; 11
 1c6:	10 c0       	rjmp	.+32     	; 0x1e8 <__vector_9+0x5c>
			}
			else
			{
				PORTD |= (1 << Led_green);
 1c8:	5e 9a       	sbi	0x0b, 6	; 11
				PORTD &= ~(1 << Led_red);
 1ca:	5d 98       	cbi	0x0b, 5	; 11
 1cc:	0d c0       	rjmp	.+26     	; 0x1e8 <__vector_9+0x5c>
			}
			break;
			case 2:
			PORTD &= ~(1 << Led_red);
 1ce:	5d 98       	cbi	0x0b, 5	; 11
			if (PORTD & (1 << Led_green))
 1d0:	5e 9b       	sbis	0x0b, 6	; 11
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__vector_9+0x4c>
			{
				PORTD &= ~(1 << Led_green);
 1d4:	5e 98       	cbi	0x0b, 6	; 11
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <__vector_9+0x5c>
			}
			else
			{
				PORTD |= (1 << Led_green);
 1d8:	5e 9a       	sbi	0x0b, 6	; 11
 1da:	06 c0       	rjmp	.+12     	; 0x1e8 <__vector_9+0x5c>
			}
			break;
			case 3:
			PORTD &= ~(1 << Led_green);
 1dc:	5e 98       	cbi	0x0b, 6	; 11
			if (PORTD & (1 << Led_red))
 1de:	5d 9b       	sbis	0x0b, 5	; 11
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <__vector_9+0x5a>
			{
				PORTD &= ~(1 << Led_red);
 1e2:	5d 98       	cbi	0x0b, 5	; 11
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <__vector_9+0x5c>
			}
			else
			{
				PORTD |= (1 << Led_red);
 1e6:	5d 9a       	sbi	0x0b, 5	; 11
			}
			break;
		}
	}
}
 1e8:	8f 91       	pop	r24
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <__vector_20>:

ISR(USART_TX_vect)
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	8f 93       	push	r24
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
	counter_usart++;
 204:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_usart>
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter_usart>
	if (counter_usart > 2)//последняя посылка
 20e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter_usart>
 212:	83 30       	cpi	r24, 0x03	; 3
 214:	68 f0       	brcs	.+26     	; 0x230 <__vector_20+0x3c>
	{
		counter_usart = 0;
 216:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter_usart>
		flags_avaliable &= ~(1 << avaliable_usart);
 21a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flags_avaliable>
 21e:	8d 7f       	andi	r24, 0xFD	; 253
 220:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flags_avaliable>
		flags_avaliable &= ~(1 << transmit_usart);
 224:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flags_avaliable>
 228:	87 7f       	andi	r24, 0xF7	; 247
 22a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flags_avaliable>
 22e:	08 c0       	rjmp	.+16     	; 0x240 <__vector_20+0x4c>
	}
	else
	{
		UDR0 = data_transmit[counter_usart];// посылаем следующий пакет
 230:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <counter_usart>
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	e9 5f       	subi	r30, 0xF9	; 249
 238:	fe 4f       	sbci	r31, 0xFE	; 254
 23a:	80 81       	ld	r24, Z
 23c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	8f 91       	pop	r24
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <__vector_18>:

ISR(USART_RX_vect)
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	2f 93       	push	r18
 25c:	3f 93       	push	r19
 25e:	4f 93       	push	r20
 260:	5f 93       	push	r21
 262:	6f 93       	push	r22
 264:	7f 93       	push	r23
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
 26a:	af 93       	push	r26
 26c:	bf 93       	push	r27
 26e:	ef 93       	push	r30
 270:	ff 93       	push	r31
	data_recive[counter_recive] = UDR0;
 272:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <counter_recive>
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 27c:	e6 5f       	subi	r30, 0xF6	; 246
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	80 83       	st	Z, r24
	counter_recive ++;
 282:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter_recive>
 286:	8f 5f       	subi	r24, 0xFF	; 255
 288:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <counter_recive>
	if (counter_recive > 2) // если приняли все пакеты
 28c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter_recive>
 290:	83 30       	cpi	r24, 0x03	; 3
 292:	08 f4       	brcc	.+2      	; 0x296 <__vector_18+0x46>
 294:	45 c0       	rjmp	.+138    	; 0x320 <__vector_18+0xd0>
	{
		counter_recive = 0;
 296:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter_recive>
		switch(data_recive[0]) //смотрим, что за команда пришла
 29a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <data_recive>
 29e:	85 34       	cpi	r24, 0x45	; 69
 2a0:	09 f1       	breq	.+66     	; 0x2e4 <__vector_18+0x94>
 2a2:	28 f4       	brcc	.+10     	; 0x2ae <__vector_18+0x5e>
 2a4:	81 34       	cpi	r24, 0x41	; 65
 2a6:	41 f0       	breq	.+16     	; 0x2b8 <__vector_18+0x68>
 2a8:	82 34       	cpi	r24, 0x42	; 66
 2aa:	59 f0       	breq	.+22     	; 0x2c2 <__vector_18+0x72>
 2ac:	39 c0       	rjmp	.+114    	; 0x320 <__vector_18+0xd0>
 2ae:	86 34       	cpi	r24, 0x46	; 70
 2b0:	01 f1       	breq	.+64     	; 0x2f2 <__vector_18+0xa2>
 2b2:	87 34       	cpi	r24, 0x47	; 71
 2b4:	19 f1       	breq	.+70     	; 0x2fc <__vector_18+0xac>
 2b6:	34 c0       	rjmp	.+104    	; 0x320 <__vector_18+0xd0>
		{
			case 65:
				mode = data_recive[2];
 2b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <data_recive+0x2>
 2bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				break;
 2c0:	2f c0       	rjmp	.+94     	; 0x320 <__vector_18+0xd0>
			case 66:
				if (mode == 3)
 2c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2c6:	83 30       	cpi	r24, 0x03	; 3
 2c8:	31 f4       	brne	.+12     	; 0x2d6 <__vector_18+0x86>
				{
					USART_Transmit(86, 0);
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	86 e5       	ldi	r24, 0x56	; 86
 2d0:	0e 94 87 00 	call	0x10e	; 0x10e <USART_Transmit>
 2d4:	25 c0       	rjmp	.+74     	; 0x320 <__vector_18+0xd0>
				} 
				else
				{
					USART_Transmit(87, temperature_avaliable());
 2d6:	0e 94 97 00 	call	0x12e	; 0x12e <temperature_avaliable>
 2da:	bc 01       	movw	r22, r24
 2dc:	87 e5       	ldi	r24, 0x57	; 87
 2de:	0e 94 87 00 	call	0x10e	; 0x10e <USART_Transmit>
 2e2:	1e c0       	rjmp	.+60     	; 0x320 <__vector_18+0xd0>
			case 67:
				break;
			case 68:
				break;
			case 69:
				TCNT2 = 0;
 2e4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
				spi_transmit_mcp(0b00010001, 255);
 2e8:	6f ef       	ldi	r22, 0xFF	; 255
 2ea:	81 e1       	ldi	r24, 0x11	; 17
 2ec:	0e 94 75 00 	call	0xea	; 0xea <spi_transmit_mcp>
				break;
 2f0:	17 c0       	rjmp	.+46     	; 0x320 <__vector_18+0xd0>
			case 70:
				spi_transmit_mcp(0b00010001, 0);
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	81 e1       	ldi	r24, 0x11	; 17
 2f6:	0e 94 75 00 	call	0xea	; 0xea <spi_transmit_mcp>
				break;
 2fa:	12 c0       	rjmp	.+36     	; 0x320 <__vector_18+0xd0>
			case 71:
				if ((data_recive[1] == 195) && (data_recive[2] == 204)) // запрос от "своей" программы
 2fc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <data_recive+0x1>
 300:	83 3c       	cpi	r24, 0xC3	; 195
 302:	71 f4       	brne	.+28     	; 0x320 <__vector_18+0xd0>
 304:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <data_recive+0x2>
 308:	8c 3c       	cpi	r24, 0xCC	; 204
 30a:	51 f4       	brne	.+20     	; 0x320 <__vector_18+0xd0>
				{
					flags_avaliable |= (1 << connect);
 30c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flags_avaliable>
 310:	80 61       	ori	r24, 0x10	; 16
 312:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flags_avaliable>
					USART_Transmit(91,0x3C33);
 316:	63 e3       	ldi	r22, 0x33	; 51
 318:	7c e3       	ldi	r23, 0x3C	; 60
 31a:	8b e5       	ldi	r24, 0x5B	; 91
 31c:	0e 94 87 00 	call	0x10e	; 0x10e <USART_Transmit>
				}
				break;
		}
	}
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <main>:


int main(void)
{
	initialization();
 342:	0e 94 48 00 	call	0x90	; 0x90 <initialization>
				USART_Transmit('s', 0x6D6E);
				while (mode == 0) 
				{}
				break;
			case 1: //режим подготовки к измерению
				led_state = 1;
 346:	11 e0       	ldi	r17, 0x01	; 1
				while (mode == 1){}
				break;
			case 2: //режим измерения
				led_state = 2;
 348:	d2 e0       	ldi	r29, 0x02	; 2
				while (mode == 2){}
				break;
			case 3: //режим аварии
				led_state = 3;
 34a:	c3 e0       	ldi	r28, 0x03	; 3
int main(void)
{
	initialization();
    while (1) 
    {
		switch(mode)
 34c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	b1 f0       	breq	.+44     	; 0x380 <main+0x3e>
 354:	28 f0       	brcs	.+10     	; 0x360 <main+0x1e>
 356:	82 30       	cpi	r24, 0x02	; 2
 358:	d1 f0       	breq	.+52     	; 0x38e <main+0x4c>
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	f9 f0       	breq	.+62     	; 0x39c <main+0x5a>
 35e:	f6 cf       	rjmp	.-20     	; 0x34c <main+0xa>
		{
			case 0: //режим простоя
				led_state = 0;
 360:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <led_state>
				PORTD |= (1 << Led_green);
 364:	5e 9a       	sbi	0x0b, 6	; 11
				PORTD &= ~(1 << Led_red);
 366:	5d 98       	cbi	0x0b, 5	; 11
				// отключаем инвертор
				if (!(flags_avaliable & (1 << avaliable_spi)))
 368:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flags_avaliable>
				{
					//spi_transmit_mcp(0b00010001,0);
				}
				USART_Transmit('s', 0x6D6E);
 36c:	6e e6       	ldi	r22, 0x6E	; 110
 36e:	7d e6       	ldi	r23, 0x6D	; 109
 370:	83 e7       	ldi	r24, 0x73	; 115
 372:	0e 94 87 00 	call	0x10e	; 0x10e <USART_Transmit>
				while (mode == 0) 
 376:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 37a:	88 23       	and	r24, r24
 37c:	e1 f3       	breq	.-8      	; 0x376 <main+0x34>
 37e:	e6 cf       	rjmp	.-52     	; 0x34c <main+0xa>
				{}
				break;
			case 1: //режим подготовки к измерению
				led_state = 1;
 380:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <led_state>
				while (mode == 1){}
 384:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	e1 f3       	breq	.-8      	; 0x384 <main+0x42>
 38c:	df cf       	rjmp	.-66     	; 0x34c <main+0xa>
				break;
			case 2: //режим измерения
				led_state = 2;
 38e:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <led_state>
				while (mode == 2){}
 392:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	e1 f3       	breq	.-8      	; 0x392 <main+0x50>
 39a:	d8 cf       	rjmp	.-80     	; 0x34c <main+0xa>
				break;
			case 3: //режим аварии
				led_state = 3;
 39c:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <led_state>
				if (!(flags_avaliable & (1 << avaliable_spi)))
 3a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flags_avaliable>
 3a4:	80 fd       	sbrc	r24, 0
 3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <main+0x6e>
				{
					spi_transmit_mcp(0b00010001,0);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	81 e1       	ldi	r24, 0x11	; 17
 3ac:	0e 94 75 00 	call	0xea	; 0xea <spi_transmit_mcp>
				}
				while(mode == 3){}
 3b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	e1 f3       	breq	.-8      	; 0x3b0 <main+0x6e>
 3b8:	c9 cf       	rjmp	.-110    	; 0x34c <main+0xa>

000003ba <_exit>:
 3ba:	f8 94       	cli

000003bc <__stop_program>:
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <__stop_program>
